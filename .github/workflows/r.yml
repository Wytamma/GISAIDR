# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# See https://github.com/r-lib/actions/tree/master/examples#readme for
# additional example workflows available for the R community.

name: Build

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  release:
    types: [published]
  #schedule:
  #  - cron: '0 0 * * *'

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        config:
          - {os: ubuntu-latest , r: 'release'}
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
    steps:
      - uses: actions/checkout@v2
      - name: Set up R ${{ matrix.config.os }} (${{ matrix.config.r }})
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      # https://github.com/actions/runner-images/issues/37#issuecomment-1175018003
      - name: Install system libraries
        if: ${{ matrix.config.os == 'ubuntu-latest' }}
        run: sudo apt-get install libcurl4-openssl-dev libharfbuzz-dev  libfribidi-dev

      - name: Install dependencies
        run: |
          install.packages(c("remotes", "rcmdcheck", "curl", "devtools"))
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      # - name: Check
      #   env:
      #     GISAIDR_PASSWORD: ${{ secrets.GISAIDR_PASSWORD }}
      #     GISAIDR_USERNAME: ${{ secrets.GISAIDR_USERNAME }}
      #   run: rcmdcheck::rcmdcheck(args = "--no-manual", error_on = "error")
      #   shell: Rscript {0}

      - name: Install
        run: |
          devtools::install(".")
        shell: Rscript {0}

      - name: Check CLI (Unix)
        if: ${{ matrix.config.os != 'windows-latest' }}
        run: |
          bin/GISAIDR --version
          bin/GISAIDR --help


      - name: Check CLI (Windows)
        if: ${{ matrix.config.os == 'windows-latest' }}
        run: |
          bin\GISAIDR.bat --version
          bin\GISAIDR.bat --help

  # If testing succeeded, build the Docker image
  docker:
    needs: test
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        registry: ['ghcr.io', 'docker.io']

    runs-on: ${{ matrix.os }}

    permissions:
      contents: read
      packages: write

    steps:
      # Inspired by: https://stackoverflow.com/a/70249520
      - name: Check Secrets
        id: check-secrets
        run: |
          if [[ "${{ matrix.registry }}" == 'ghcr.io' ]]; then
            echo "pass=true" >> $GITHUB_OUTPUT;
          elif [[ "${{ matrix.registry }}" == 'docker.io' ]]; then
            if [[ "${{ secrets.DOCKER_USERNAME }}" != '' && "${{ secrets.DOCKER_PASSWORD }}" != '' ]]; then
              echo "pass=true" >> $GITHUB_OUTPUT;
            else
              echo "pass=false" >> $GITHUB_OUTPUT;
            fi
          else
            echo "pass=false" >> $GITHUB_OUTPUT;
          fi

      - name: Checkout
        if: steps.check-secrets.outputs.pass == 'true'
        uses: actions/checkout@v3

      - name: Set up QEMU
        if: steps.check-secrets.outputs.pass == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check-secrets.outputs.pass == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Registry Login (GitHub)
        if: steps.check-secrets.outputs.pass == 'true' && matrix.registry == 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Registry Login (DockerHub)
        if: steps.check-secrets.outputs.pass == 'true' && matrix.registry == 'docker.io'
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Metadata
        if: steps.check-secrets.outputs.pass == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build
        if: steps.check-secrets.outputs.pass == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=GISAIDR.tar

      - name: Load
        if: steps.check-secrets.outputs.pass == 'true'
        run: |
          load=$(docker load --input GISAIDR.tar | tee /dev/stderr)
          TAGS=$(echo $load | sed "s/Loaded image: //g")
          echo TAGS="$TAGS" >> $GITHUB_ENV

      # output.tags can be an array (ex. v0.2.0, main, latest)
      - name: Help
        if: steps.check-secrets.outputs.pass == 'true'
        run: >
          for tag in $TAGS; do
            echo $tag
            docker run $tag GISAIDR --help
          done

      # Build the image, only push on 'main' or a tag that starts with 'v'
      # Extra debugging, build and push on 'cli' branch for testing
      - name: Build and Push
        uses: docker/build-push-action@v5
        if: |
            steps.check-secrets.outputs.pass == 'true' &&
            (startsWith(github.event.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/cli' )
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # # Disable uploading image as CI artifact for debugging since it's quite large ~1GB compressed
      # - name: upload image artifact
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: GISAIDR-docker
      #     path: GISAIDR.tar
      #     retention-days: 1
      #     if-no-files-found: error
